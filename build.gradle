plugins {
    id 'java'
    id 'application'
    id("org.openjfx.javafxplugin") version "0.0.13"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'org.boccineko'
version = '1.0-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.rest-assured:rest-assured:5.3.2'
    compileOnly 'com.microsoft.playwright:playwright:1.49.0'
    implementation 'org.xerial:sqlite-jdbc:3.45.0.0'
    compileOnly "org.openjfx:javafx-controls:17.0.13"
    compileOnly "org.openjfx:javafx-fxml:17.0.13"
    compileOnly 'org.openjfx:javafx-graphics:17.0.13'
    compileOnly 'org.openjfx:javafx-base:17.0.13'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'org.apache.logging.log4j:log4j-api:2.22.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.22.0'
}

application {
    mainClass = 'elibraryparser.Main'
}

test {
    useJUnitPlatform()
}

javafx {
    version = '17.0.13'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

shadowJar {
    archiveBaseName.set('elibrary-parser-no-javafx')
    archiveVersion.set('1.0')
    archiveClassifier.set('')
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    exclude 'com.microsoft.playwright'
    exclude 'org.openjfx:javafx-controls'
    exclude 'org.openjfx:javafx-fxml'
    exclude 'org.openjfx:javafx-graphics'
    exclude 'org.openjfx:javafx-base'
    exclude 'javafx**'
}

tasks.register('fullShadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    group = 'Shadow'
    description = 'Создает объединенный JAR с JavaFX'

    archiveBaseName.set('elibrary-parser-javafx')
    archiveVersion.set('1.0')
    archiveClassifier.set('windows')
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}